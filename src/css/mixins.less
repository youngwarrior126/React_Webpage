@import "variables.less";
@import "colors.less";

// Mixin Functions

.active(@color, @multiplier: 0.8) {
    color: @color;
    &:active {
      color: @color*@multiplier;
    }
}
.active-bg(@color, @multiplier: 0.8) {
    background-color: @color;
    &:active {
      background-color: @color*@multiplier;
    }
}
.animation(@time: 1s, @delay: 0s,) {
  animation-duration: @time!important;
  animation-delay: @delay!important;
}
.background(@color:@setmine-royal-blue, @textColor:@setmine-gray) {
    background-color:@color;
    color:@textColor;
}
.border-radius(@radius) {
  -webkit-border-radius: @radius;
    -moz-border-radius: @radius;
    border-radius: @radius;
}
.createBlur(@image, @length) {
    filter: blur(@length);
    -webkit-filter: blur(@length);
    content: url(@image);
    height:100%!important;
    width:100%!important;
    position: absolute;
}
.createDivider(@width, @height, @color) {
    height: @height;
    width: @width;
    background-color: @color;
}
.createOverlay(@percentage, @color: #2b2b2b) {
    position: absolute;
    color: white;
    background-color: fade(@color, @percentage);
    height:100%!important;
    width:100%!important;
}
.coloredBackground(@color:@setmine-royal-blue, @alpha:100%) {
    background-color: fade(@color, @alpha);
}
.desktop(@rules, @min-value: 980px) {
  @media screen and (min-width: @min-value) {@rules();}
}

.flexContainer(@direction:row, @oldDirection:horizontal, @wrap:nowrap)
{
  display: -webkit-box;
  display: -moz-box;
  display: -ms-flexbox;
  display: -webkit-flex;
  display: flex;
  -webkit-box-orient:@oldDirection;
  -moz-box-orient:@oldDirection;
  -ms-box-orient:@oldDirection;
  -webkit-flex-direction:@direction;
  flex-direction:@direction;
  webkit-flex-flow: @direction @wrap;
  -moz-flex-flow: @direction @wrap;
  -ms-flex-flow: @direction @wrap;
  flex-flow: @direction @wrap;
  flex-wrap: @wrap;
  -webkit-flex-wrap: @wrap;
  -moz-flex-wrap: @wrap;
  -ms-flex-wrap: @wrap;
}
.flex(@flexGrow:1, @flexShrink: 1, @flexBasis: auto)
{
  -webkit-box-flex: @flexGrow @flexShrink @flexBasis;
  -moz-box-flex: @flexGrow @flexShrink @flexBasis; 
  -webkit-flex: @flexGrow @flexShrink @flexBasis;
  -ms-flex: @flexGrow @flexShrink @flexBasis;
  flex: @flexGrow @flexShrink @flexBasis;
}
.gradient(@origin, @stops){
    background: -webkit-linear-gradient(@origin, @stops) no-repeat;
    background:    -moz-linear-gradient(@origin, @stops) no-repeat;
    background:    -ms-linear-gradient(@origin, @stops) no-repeat;
    background:      -o-linear-gradient(@origin, @stops) no-repeat;
    background:         linear-gradient(@origin, @stops) no-repeat;
}
.hover(@color, @multiplier: 0.8) {
    color: @color;
    &:hover {
      color: @color*@multiplier;
    }
}
.hover-bg(@color, @multiplier: 0.8) {
    background-color: @color;
    &:hover {
      background-color: @color*@multiplier;
    }
}
.mobile(@rules, @max-value: 980px) {
  @media screen and (max-width: @max-value) {@rules();}
}
.size-min(@width, @height) {
    min-width: @width!important;
    min-height: @height!important;
}
.size(@width, @height) {
    width: @width!important;
    height: @height!important;
}
.transition(@durationTime:@defaultDuration, @transitionType:ease-out, @transitionProperty:all) {
  transition: @transitionProperty @durationTime @transitionType;
  transition-duration: @durationTime;
}
.unflexContainer() {
  display: initial;
}

// Mixin Rules

// complementary color scheme
@base: #663333;
@complement1: spin(@base, 180);
@complement2: darken(spin(@base, 180), 5%);
@lighten1: lighten(@base, 15%);
@lighten2: lighten(@base, 30%);

.background-blue {
  background-color:@setmine-royal-blue;
}
.background-purple {
  background-color:@setmine-medium-purple;
}
.center {
  margin:auto;
}
.box-shadow (@x: 0px, @y: 3px, @blur: 0px, @alpha: 1) {
    -webkit-box-shadow: @x @y @blur rgba(0, 0, 0, @alpha);
    -moz-box-shadow: @x @y @blur rgba(0, 0, 0, @alpha);
    box-shadow: @x @y @blur rgba(0, 0, 0, @alpha);
}
.buffer {
  .flex(1,1,auto)!important;
}
.buffer-2x {
    .flex(2,1,auto)!important;
}
.buffer-3x {
    .flex(3,1,auto)!important;
}
.buffer-4x {
    .flex(4,1,auto)!important;
}
.buffer-5x {
    .flex(5,1,auto)!important;
}
.buffer-6x {
    .flex(6,1,auto)!important;
}
.buffer-lg {
    .flex(10,1,auto)!important;   
}
.flex-column {
  .flexContainer(column, vertical, wrap);
}
.flex-self {
  .flex();
}
.flex-fixed {
  .flex(1,1,0);
}
.flex-zero {
  .flex(0,1,auto);
}
.flex-row {
  .flexContainer(row, horizontal, wrap);
}
.flex {
  .flex();
}
.flex-2x {
  .flex(2,1,auto)!important;
}
.flex-3x {
  .flex(3,1,auto)!important;
}
.flex-4x {
  .flex(4,1,auto)!important;
}
.flex-5x {
  .flex(5,1,auto)!important;
}
.flex-6x {
  .flex(6,1,auto)!important;
}
.hidden  {
  display:none!important;
}
.hidden-fade {
  opacity:0!important;
}
.hide-mobile {
  .mobile({
    .hidden;
    });
}
.hide-desktop {
  .desktop({
    .hidden;
  });
}
.nav-target {
  opacity:1;
  .transition(0.3s, all, linear);
}
.icon-text-container {
  .flex(0);
  padding: 0px 1%;
}
.overlay-container {
    position: relative;
}
.page {
  overflow-y: scroll;
}
.panel {
    .flexContainer(column, vertical);
}
.required {
  border: solid 1px @setstory-red!important;
}
.scrollable {
  overflow-y:scroll!important;
}
.setrecords-panel {
  border: solid 2px @setrecords-border;
  background: @setrecords-panel-background;
}
